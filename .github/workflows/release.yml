name: Release Workflow

on:
  push:
    tags: 
      - 'v*'
    # branches:
    #   - master
  # milestone:
  #   types: [closed]


permissions:
  contents: write
  issues: write # to be able to comment on released issues
  pull-requests: write # to be able to comment on released pull requests
  id-token: write # to enable use of OIDC for npm provenance

jobs:
  release:
    name: Release 
    runs-on: ubuntu-22.04

    steps:
      - name: "Determine tag"
        if: "${{ github.event_name }} == 'push' && ${{ github.ref_type }} == 'tag'"
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"
        shell: "bash"

      - name: "Fetch commit messages"
        id: fetch_commits
        if: "${{ github.event_name }} == 'push' && ${{ github.ref_type }} == 'tag'"
        run: |
          if (!process.env.RELEASE_TAG) {
            core.setFailed("The environment variable RELEASE_TAG is not defined.");
            return;
          }

          try {
            const response = await github.rest.repos.compareCommits({
              base: 'tags/' + process.env.RELEASE_TAG,
              head: 'HEAD',
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const commitMessages = response.data.commits.map(commit => commit.commit.message).join('\n');
            core.exportVariable('COMMIT_MESSAGES', commitMessages);
          } catch (error) {
            core.setFailed(error.message);
          }
        shell: "bash"
        env:
          RELEASE_TAG: ${{ env.RELEASE_TAG }}

      - name: "Create release"
        uses: "actions/github-script@v7.0.1"
        with:
          
          script: |
            if (!process.env.RELEASE_TAG) {
              core.setFailed("The environment variable RELEASE_TAG is not defined.");
              return;
            }

            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: false,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
                body: process.env.COMMIT_MESSAGES, // Include commit messages as release notes
              });

              core.exportVariable('RELEASE_HTML_URL', response.data.html_url);
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
